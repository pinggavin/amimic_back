<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>org.jeecgframework.boot</groupId>
        <artifactId>jeecg-boot-parent</artifactId>
        <version>2.4.3</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>jeecg-boot-module-system</artifactId>
    <packaging>jar</packaging>

    <repositories>
        <repository>
            <id>aliyun</id>
            <name>aliyun Repository</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>jeecg</id>
            <name>jeecg Repository</name>
            <url>http://maven.jeecg.org/nexus/content/repositories/jeecg</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

    <dependencies>
        <dependency>
            <groupId>org.jeecgframework.boot</groupId>
            <artifactId>jeecg-boot-module-demo</artifactId>
            <version>${jeecgboot.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jeecgframework.boot</groupId>
            <artifactId>jeecg-boot-module-bbs</artifactId>
            <version>${jeecgboot.version}</version>
        </dependency>
        <!-- 积木报表 -->
        <dependency>
            <groupId>org.jeecgframework.jimureport</groupId>
            <artifactId>spring-boot-starter-jimureport</artifactId>
            <version>1.3.1-beta4</version>
            <exclusions>
                <exclusion>
                    <groupId>org.jeecgframework</groupId>
                    <artifactId>autopoi-web</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <!-- 项目打包时会将java目录中的*.xml文件也进行打包 -->
    <build>
        <plugins>
            <plugin>
                <!--该插件主要用途：构建可执行的JAR -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!-- 排除依赖包 -->
                    <layout>ZIP</layout>
                    <includes>
                        <include>
                            <groupId>org.jeecgframework.boot</groupId>
                            <artifactId>jeecg-boot-module-bbs</artifactId>
                        </include>
                    </includes>
                    <!-- 排除依赖 -->
                    <!--微服务模式下修改为 true,跳过此打包插件，否则微服务模块无法引用-->
                    <skip>false</skip>
                </configuration>
                <!-- 排除依赖包 -->
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
                <filtering>false</filtering>
            </resource>

            <!--设置自己目录下的配置文件-->
            <resource>
                <!--下方resources的文件夹名字要和自己项目的文件夹名确认一致才行 很多人就是忽略了名字不一致 -->
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*</include>
                </includes>
            </resource>
        </resources>
    </build>


    <!--<build>-->




        <!--<plugins>-->
            <!--<plugin>-->
                <!--<groupId>org.springframework.boot</groupId>-->
                <!--<artifactId>spring-boot-maven-plugin</artifactId>-->
                <!--<configuration>-->
                    <!--&lt;!&ndash; 排除依赖包 &ndash;&gt;-->
                    <!--<layout>ZIP</layout>-->
                    <!--<includes>-->
                        <!--<include>-->
                            <!--<groupId>org.jeecgframework.boot</groupId>-->
                            <!--<artifactId>jeecg-boot-module-bbs</artifactId>-->
                        <!--</include>-->
                    <!--</includes>-->
                    <!--&lt;!&ndash; 排除依赖 &ndash;&gt;-->
                    <!--&lt;!&ndash;微服务模式下修改为 true,跳过此打包插件，否则微服务模块无法引用&ndash;&gt;-->
                    <!--<skip>false</skip>-->
                <!--</configuration>-->
                <!--&lt;!&ndash; 排除依赖包 &ndash;&gt;-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<goals>-->
                            <!--<goal>repackage</goal>-->
                        <!--</goals>-->
                    <!--</execution>-->
                <!--</executions>-->


            <!--</plugin>-->


            <!--&lt;!&ndash;<plugin>&ndash;&gt;-->
                <!--&lt;!&ndash;<groupId>com.spotify</groupId>&ndash;&gt;-->
                <!--&lt;!&ndash;<artifactId>docker-maven-plugin</artifactId>&ndash;&gt;-->
                <!--&lt;!&ndash;<version>1.0.0</version>&ndash;&gt;-->
                <!--&lt;!&ndash;<executions>&ndash;&gt;-->
                    <!--&lt;!&ndash;&lt;!&ndash;执行mvn package,即执行 mvn clean package docker:build&ndash;&gt;&ndash;&gt;-->
                    <!--&lt;!&ndash;<execution>&ndash;&gt;-->
                        <!--&lt;!&ndash;<id>build-image</id>&ndash;&gt;-->
                        <!--&lt;!&ndash;<phase>package</phase>&ndash;&gt;-->
                        <!--&lt;!&ndash;<goals>&ndash;&gt;-->
                            <!--&lt;!&ndash;<goal>build</goal>&ndash;&gt;-->
                        <!--&lt;!&ndash;</goals>&ndash;&gt;-->
                    <!--&lt;!&ndash;</execution>&ndash;&gt;-->
                <!--&lt;!&ndash;</executions>&ndash;&gt;-->

                <!--&lt;!&ndash;<configuration>&ndash;&gt;-->
                    <!--&lt;!&ndash;&lt;!&ndash; 镜像名称 &ndash;&gt;&ndash;&gt;-->
                    <!--&lt;!&ndash;<imageName>${project.artifactId}</imageName>&ndash;&gt;-->
                    <!--&lt;!&ndash;&lt;!&ndash; 指定标签 &ndash;&gt;&ndash;&gt;-->
                    <!--&lt;!&ndash;<imageTags>&ndash;&gt;-->
                        <!--&lt;!&ndash;<imageTag>latest</imageTag>&ndash;&gt;-->
                    <!--&lt;!&ndash;</imageTags>&ndash;&gt;-->
                    <!--&lt;!&ndash;&lt;!&ndash; 基础镜像&ndash;&gt;&ndash;&gt;-->
                    <!--&lt;!&ndash;<baseImage>openjdk:8-jdk-alpine</baseImage>&ndash;&gt;-->

                    <!--&lt;!&ndash;&lt;!&ndash; 切换到容器工作目录&ndash;&gt;&ndash;&gt;-->
                    <!--&lt;!&ndash;<workdir>/ROOT</workdir>&ndash;&gt;-->

                    <!--&lt;!&ndash;<entryPoint>["java","-jar","${project.build.finalName}.jar"]</entryPoint>&ndash;&gt;-->

                    <!--&lt;!&ndash;&lt;!&ndash; 指定远程 Docker API地址  &ndash;&gt;&ndash;&gt;-->
                    <!--&lt;!&ndash;<dockerHost>http://121.196.99.215:10010</dockerHost>&ndash;&gt;-->

                    <!--&lt;!&ndash;&lt;!&ndash; 复制 jar包到docker容器指定目录&ndash;&gt;&ndash;&gt;-->
                    <!--&lt;!&ndash;<resources>&ndash;&gt;-->
                        <!--&lt;!&ndash;<resource>&ndash;&gt;-->
<!--&lt;!&ndash;&lt;!&ndash;                            <targetPath>/root/wise-java/dev</targetPath>&ndash;&gt;&ndash;&gt;-->
                            <!--&lt;!&ndash;<targetPath>/root/wise-java-dev</targetPath>&ndash;&gt;-->
                            <!--&lt;!&ndash;&lt;!&ndash; 用于指定需要复制的根目录，${project.build.directory}表示target目录 &ndash;&gt;&ndash;&gt;-->
                            <!--&lt;!&ndash;<directory>${project.build.directory}</directory>&ndash;&gt;-->
                            <!--&lt;!&ndash;&lt;!&ndash; 用于指定需要复制的文件，${project.build.finalName}.jar就是打包后的target目录下的jar包名称　&ndash;&gt;&ndash;&gt;-->
                            <!--&lt;!&ndash;<include>${project.build.finalName}.jar</include>&ndash;&gt;-->
                        <!--&lt;!&ndash;</resource>&ndash;&gt;-->
                    <!--&lt;!&ndash;</resources>&ndash;&gt;-->
                <!--&lt;!&ndash;</configuration>&ndash;&gt;-->
            <!--&lt;!&ndash;</plugin>&ndash;&gt;-->
        <!--</plugins>-->
    <!--</build>-->
</project>